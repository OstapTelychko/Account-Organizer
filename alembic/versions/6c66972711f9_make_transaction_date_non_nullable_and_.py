"""Make transaction date non-nullable and drop old columns

Revision ID: 6c66972711f9
Revises: de727787f992
Create Date: 2025-10-21 00:23:10.776948

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6c66972711f9'
down_revision: Union[str, None] = 'de727787f992'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('transactions') as batch_op:
        batch_op.alter_column('date',
               existing_type=sa.DATE(),
               nullable=False)
        batch_op.drop_column('year')
        batch_op.drop_column('day')
        batch_op.drop_column('month')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # We DO NOT attempt to make the transaction columns non-nullable again, as this
    # would cause the same IntegrityError. The schema is now compatible
    # with the previous code version, which is the goal of a downgrade.
    op.add_column('transactions', sa.Column('month', sa.SMALLINT(), nullable=True))
    op.add_column('transactions', sa.Column('day', sa.SMALLINT(), nullable=True))
    op.add_column('transactions', sa.Column('year', sa.SMALLINT(), nullable=True))
    
    op.execute("UPDATE transactions SET year = CAST(strftime('%Y', date) AS INTEGER)")
    op.execute("UPDATE transactions SET month = CAST(strftime('%m', date) AS INTEGER)")
    op.execute("UPDATE transactions SET day = CAST(strftime('%d', date) AS INTEGER)")

    with op.batch_alter_table('transactions') as batch_op:
        batch_op.alter_column('date',
               existing_type=sa.DATE(),
               nullable=True)
    # ### end Alembic commands ###
